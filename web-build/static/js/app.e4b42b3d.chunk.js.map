{"version":3,"sources":["reducers/searchOptionReducer.tsx","reducers/searchQueryReducer.tsx","reducers/darkModeReducer.tsx","reducers/rootReducer.tsx","components/Header.tsx","components/Logo.tsx","components/SearchBar.tsx","components/RadioButtonContainer.tsx","components/SearchResults.tsx","components/SearchContainer.tsx","components/Footer.tsx","components/Main.tsx","App.tsx","assets/logo.png"],"names":["initialState","value","searchOptionReducer","state","action","type","payload","text","searchQueryReducer","theme","darkModeReducer","rootReducer","combineReducers","query","searchOption","darkMode","STATUSBAR_HEIGHT","Constants","statusBarHeight","Header","dispatch","useDispatch","useSelector","View","style","styles","container","item","Text","flexDirection","onChange","checked","height","offColor","onColor","uncheckedIcon","flex","justifyContent","alignItems","Ionicons","color","name","size","checkedIcon","Pressable","onPress","Linking","openURL","StyleSheet","create","width","position","top","Platform","OS","paddingRight","paddingLeft","backgroundColor","padding","Logo","Image","source","require","image","aspectRatio","resizeMode","SearchBar","containerStyle","darkModeContainer","textStyle","darkModeText","Searchbar","placeholder","placeholderTextColor","onChangeText","newQuery","inputStyle","iconColor","marginTop","borderWidth","borderColor","RadioButtonContainer","option","RadioButton","Group","onValueChange","newValue","uncheckedColor","status","GET_USERS","gql","GET_REPOSITORIES","SearchResults","backgroundStyle","darkModeBackground","useLazyQuery","variables","userQuery","getUsers","loadingUsers","loading","userData","data","getRepositories","loadingRepositories","repositoryData","options","useEffect","length","timeoutId","setTimeout","handleNewSearch","clearTimeout","screenContainer","ActivityIndicator","animating","FlatList","maxHeight","keyExtractor","node","id","search","edges","indicatorStyle","initialNumToRender","renderItem","TouchableOpacity","url","itemContainer","uri","avatarUrl","numberOfLines","ellipsizeMode","login","owner","boldText","nameWithOwner","starSnippetContainer","starIconBox","MaterialIcons","alignSelf","stargazerCount","description","borderTopLeftRadius","borderBottomLeftRadius","borderRadius","overflow","borderBottomWidth","minWidth","borderRightWidth","borderRightColor","marginRight","fontWeight","SearchContainer","maxWidth","marginBottom","Footer","bottom","zIndex","elevation","Main","StatusBar","App","store","createStore","httpLink","HttpLink","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","SafeAreaView","module","exports"],"mappings":"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","file":"static/js/app.e4b42b3d.chunk.js","sourcesContent":["const initialState = {value: 'repositories'}\n\nconst searchOptionReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case \"TOGGLE_OPTION\":\n      return {...state, value: action.payload};\n      break;\n    default:\n      return state;\n  }\n}\n\nexport default searchOptionReducer;","const initialState = {text: ''}\n\nconst searchQueryReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case \"UPDATE_QUERY\":\n      return {...state, text: action.payload};\n      break;\n    case \"RESET_QUERY\":\n      return {...state, text: ''};\n      break;\n    default:\n      return state;\n  }\n}\n\nexport default searchQueryReducer;","const initialState = {\n  theme: false\n}\n\nconst darkModeReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"TOGGLE_THEME\":\n      return {...state, theme: !state.theme}\n      break;\n    default:\n      return state;\n  }\n}\n\nexport default darkModeReducer;","import { combineReducers } from 'redux';\nimport searchOptionReducer from './searchOptionReducer';\nimport searchQueryReducer from './searchQueryReducer';\nimport darkModeReducer from './darkModeReducer'\n\nconst rootReducer = combineReducers({\n  query: searchQueryReducer,\n  searchOption: searchOptionReducer,\n  darkMode: darkModeReducer\n});\n\nexport default rootReducer;","import React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Linking,\n  Pressable,\n  Platform,\n} from \"react-native\";\nimport Constants from \"expo-constants\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Switch from \"react-switch\";\n\nconst STATUSBAR_HEIGHT = Constants.statusBarHeight;\n\nexport default function Header() {\n  const dispatch = useDispatch();\n  const darkMode = useSelector(state => state.darkMode.theme)\n\n  const handleChange = () => {\n    dispatch({\n      type: \"TOGGLE_THEME\"\n    })\n  };\n\n  // const toggleDarkMode = () => ()\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.item}>\n        <Text>Onur Eker</Text>\n      </View>\n      <View style={{ flexDirection: \"row\" }}>\n        <View style={styles.item}>\n          <Switch\n            onChange={handleChange}\n            checked={darkMode}\n            height={26}\n            offColor=\"#3D3F47\"\n            onColor=\"#134484\"\n            uncheckedIcon={\n              <View\n                style={{\n                  flex: 1,\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                  height: \"100%\",\n                }}\n              >\n                <View>\n                  <Ionicons color=\"yellow\" name=\"md-sunny\" size={18} />\n                </View>{\" \"}\n              </View>\n            }\n            checkedIcon={\n              <View\n                style={{\n                  flex: 1,\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                  height: \"100%\",\n                }}\n              >\n                <View>\n                  <Ionicons color=\"yellow\" name=\"md-moon\" size={18} />\n                </View>{\" \"}\n              </View>\n            }\n          />\n        </View>\n        <View style={styles.item}>\n          <Pressable\n            onPress={() =>\n              Linking.openURL(`https://www.linkedin.com/in/onureker/`)\n            }\n          >\n            <Text>\n              <Ionicons name=\"logo-linkedin\" size={14} /> LinkedIn\n            </Text>\n          </Pressable>\n        </View>\n        <View style={styles.item}>\n          <Pressable\n            onPress={() => Linking.openURL(`https://github.com/yonureker/`)}\n          >\n            <Text>\n              <Ionicons name=\"logo-github\" size={14} /> Github\n            </Text>\n          </Pressable>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    position: \"absolute\",\n    top: Platform.OS === \"android\" ? STATUSBAR_HEIGHT : 0,\n    flexDirection: \"row\",\n    paddingRight: 10,\n    paddingLeft: 10,\n    backgroundColor: \"#F2F2F2\",\n  },\n  item: {\n    padding: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n});\n","import React from 'react'\nimport { View, Image, StyleSheet } from 'react-native'\n\nexport default function Logo() {\n  return (\n    <View style={styles.container}>\n      <Image source={require('../assets/logo.png')} style={styles.image}/>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  image: {\n    aspectRatio: 5.5,\n    resizeMode: 'contain',\n    width: 276,\n    height: 50\n  }\n})\n\n","import React from 'react'\nimport { StyleSheet } from 'react-native';\nimport { Searchbar } from 'react-native-paper';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport default function SearchBar() {\n  const dispatch = useDispatch();\n  const query = useSelector<string>(state => state.query.text)\n  const darkMode = useSelector(state => state.darkMode.theme)\n\n  const containerStyle = darkMode ? styles.darkModeContainer : null\n  const textStyle = darkMode ? styles.darkModeText : null;\n\n  const onChangeSearch = (newQuery : string) => dispatch({type: \"UPDATE_QUERY\", payload: newQuery});\n\n  return (\n    <Searchbar\n      placeholder=\"Search\"\n      placeholderTextColor={textStyle}\n      onChangeText={onChangeSearch}\n      value={query}\n      style={[styles.container, containerStyle]}\n      inputStyle={textStyle}\n      iconColor={darkMode ? \"white\" : 'black'}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 20,\n    borderWidth: 1,\n    borderColor: '#DFE1E5'\n  },\n  darkModeContainer : {\n    backgroundColor: 'black',\n  },\n  darkModeText : {\n    color: 'white'\n  }\n})\n","import React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { RadioButton } from \"react-native-paper\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nexport default function RadioButtonContainer() {\n  const dispatch = useDispatch();\n  const option = useSelector((state) => state.searchOption.value);\n  const darkMode = useSelector(state => state.darkMode.theme)\n  \n  const textStyle = darkMode ? styles.darkModeText : null;\n\n\n  return (\n    <RadioButton.Group\n      onValueChange={(newValue) =>{\n        dispatch({ type: \"TOGGLE_OPTION\", payload: newValue })\n        dispatch({type: \"RESET_QUERY\"})\n      }\n      }\n      value={option}\n    >\n      <View style={{ flexDirection: \"row\", justifyContent: \"space-evenly\" }}>\n        <View style={styles.container}>\n          <RadioButton value=\"users\" uncheckedColor=\"gray\" status={option === 'users' ? 'checked' : \"unchecked\"}/>\n          <Text style={textStyle}>Search Users</Text>\n        </View>\n        <View style={styles.container}>\n          <RadioButton value=\"repositories\" uncheckedColor=\"gray\" status={option === 'repositories' ? 'checked' : \"unchecked\"}/>\n          <Text style={textStyle}>Search Repositories</Text>\n        </View>\n        {/* <View style={styles.container}>\n          <RadioButton value=\"topics\" />\n          <Text>Search Topics</Text>\n        </View> */}\n      </View>\n    </RadioButton.Group>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  darkModeText : {\n    color: 'white'\n  }\n});\n","import React, { useState, useEffect } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Image,\n  TouchableOpacity,\n  FlatList\n} from \"react-native\";\nimport { useSelector } from \"react-redux\";\nimport { ActivityIndicator } from \"react-native-paper\";\nimport * as Linking from \"expo-linking\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\n\nconst GET_USERS = gql`\n  query SearchUsers($userQuery: String!) {\n    search(query: $userQuery, type: USER, first: 20) {\n      edges {\n        node {\n          ... on User {\n            avatarUrl\n            id\n            login\n            url\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst GET_REPOSITORIES = gql`\n  query SearchRepositories($userQuery: String!) {\n    search(query: $userQuery, type: REPOSITORY, first: 20) {\n      edges {\n        node {\n          ... on Repository {\n            id\n            url\n            description\n            stargazerCount\n            nameWithOwner\n            owner {\n              avatarUrl\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function SearchResults() {\n  const query = useSelector((state) => state.query.text);\n  const option = useSelector((state) => state.searchOption.value);\n  const darkMode = useSelector((state) => state.darkMode.theme);\n\n  const textStyle = darkMode ? styles.darkModeText : null;\n  const backgroundStyle = darkMode ? styles.darkModeBackground : null;\n\n  const [getUsers, { loading: loadingUsers, data: userData }] = useLazyQuery(\n    GET_USERS,\n    {\n      variables: { userQuery: query }\n    }\n  );\n\n  const [\n    getRepositories,\n    { loading: loadingRepositories, data: repositoryData }\n  ] = useLazyQuery(GET_REPOSITORIES, {\n    variables: { userQuery: query }\n  });\n\n  const options = userData || repositoryData;\n\n  //repositoryData.search.edges\n\n  useEffect(() => {\n    if (query.length >= 3) {\n      const timeoutId = setTimeout(() => handleNewSearch(), 1000);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [query]);\n\n  const handleNewSearch = () => {\n    if (option === \"users\") {\n      getUsers();\n    } else {\n      getRepositories();\n    }\n  };\n\n  if (query === \"\") {\n    return null;\n  }\n\n  return (\n    <View style={styles.screenContainer}>\n      {(loadingUsers || loadingRepositories) && (\n        <ActivityIndicator style={{padding: 10}} size=\"large\" animating={true} />\n      )}\n\n      {options && (\n        <FlatList\n          style={{\n            maxHeight: 280\n            // borderTopLeftRadius: 10,\n            // borderBottomLeftRadius: 10,\n            // borderRadius: 10,\n          }}\n          keyExtractor={(item) => item.node.id}\n          data={options.search.edges}\n          indicatorStyle=\"black\"\n          initialNumToRender={10}\n          renderItem={({ item }) => (\n            <TouchableOpacity\n              onPress={() => Linking.openURL(`${item.node.url}`)}\n            >\n              {option === \"users\" && (\n                <View style={styles.itemContainer}>\n                  <View>\n                    <Image\n                      source={{ uri: `${item.node.avatarUrl}` }}\n                      style={styles.image}\n                    />\n                  </View>\n                  <View>\n                    <Text\n                      numberOfLines={1}\n                      ellipsizeMode=\"tail\"\n                      style={textStyle}\n                    >\n                      {item.node.login}\n                    </Text>\n                  </View>\n                </View>\n              )}\n\n              {option === \"repositories\" && (\n                <View style={styles.itemContainer}>\n                  <View>\n                    <Image\n                      source={{ uri: `${item.node.owner.avatarUrl}` }}\n                      style={styles.image}\n                    />\n                  </View>\n                  <View style={{ flex: 1 }}>\n                    <View\n                      style={{\n                        flex: 1,\n                        flexDirection: \"row\",\n                        alignItems: \"center\",\n                        justifyContent: \"space-between\"\n                      }}\n                    >\n                      <View style={{ flex: 10 }}>\n                        <Text\n                          style={[textStyle, styles.boldText]}\n                          numberOfLines={1}\n                          ellipsizeMode=\"tail\"\n                        >\n                          {item.node.nameWithOwner}\n                        </Text>\n                      </View>\n                      <View style={styles.starSnippetContainer}>\n                        <View style={[styles.starIconBox, backgroundStyle]}>\n                          <View>\n                            <MaterialIcons\n                              name=\"star-border\"\n                              size={16}\n                              color=\"gray\"\n                            />\n                          </View>\n                        </View>\n                        <View style={{ flex: 1 }}>\n                          <Text style={[{ alignSelf: \"center\" }, textStyle]}>\n                            {item.node.stargazerCount}\n                          </Text>\n                        </View>\n                      </View>\n                    </View>\n                    <View style={{ marginTop: 2 }}>\n                      <Text\n                        numberOfLines={1}\n                        ellipsizeMode=\"tail\"\n                        style={textStyle}\n                      >\n                        {item.node.description}\n                      </Text>\n                    </View>\n                  </View>\n                </View>\n              )}\n            </TouchableOpacity>\n          )}\n        />\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screenContainer: {\n    maxHeight: 300,\n    marginTop: 10,\n    borderWidth: 1,\n    borderColor: \"#E8E8E8\",\n    borderTopLeftRadius: 10,\n    borderBottomLeftRadius: 10,\n    borderRadius: 10,\n    overflow: \"hidden\"\n  },\n  itemContainer: {\n    flexDirection: \"row\",\n    padding: 5,\n    paddingLeft: 10,\n    borderBottomWidth: 1,\n    borderColor: \"#F2F2F2\",\n    alignItems: \"center\"\n  },\n  starSnippetContainer: {\n    borderWidth: 1,\n    borderColor: \"#D9DBDB\",\n    borderRadius: 10,\n    height: 25,\n    width: 110,\n    minWidth: 90,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flex: 1\n  },\n  starIconBox: {\n    height: \"100%\",\n    flexDirection: \"row\",\n    borderRightWidth: 1,\n    borderTopLeftRadius: 10,\n    borderBottomLeftRadius: 10,\n    borderRightColor: \"#D9DBDB\",\n    backgroundColor: \"#FAFBFC\",\n    alignItems: \"center\",\n    paddingLeft: 5,\n    paddingRight: 5\n    // padding: 10,\n  },\n  image: { height: 40, width: 40, marginRight: 10 },\n  darkModeText: {\n    color: \"white\"\n  },\n  boldText: {\n    fontWeight: \"bold\"\n  },\n  darkModeBackground: {\n    backgroundColor: \"black\"\n  }\n});\n","import React, {useState} from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\nimport SearchBar from './SearchBar'\nimport RadioButtonContainer from './RadioButtonContainer'\nimport SearchResults from './SearchResults';\n\nexport default function SearchContainer() {\n\n\n  return (\n    <View style={styles.container}>\n    <RadioButtonContainer />\n    <SearchBar />\n    <SearchResults />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 150,\n    width: '100%',\n    maxWidth: 600,\n    padding: 10,\n    marginBottom: 150\n  }\n})\n","import React from 'react'\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Ionicons } from \"@expo/vector-icons\";  \n\nexport default function Footer() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.item}>\n        <Text>Built with React Native Web <Ionicons name=\"heart\" size={14} color=\"red\"/></Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    bottom: 0,\n    zIndex: 99,\n    elevation: 99,\n    backgroundColor: '#F2F2F2',\n    width: '100%'\n  },\n  item: {\n    padding: 10,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n})\n","import React from 'react'\nimport { Platform, SafeAreaView, StyleSheet, Text, View } from \"react-native\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { useSelector } from \"react-redux\";\n\nimport Header from \"../components/Header\";\nimport Logo from \"../components/Logo\";\nimport SearchContainer from \"../components/SearchContainer\";\nimport Footer from \"../components/Footer\";\n\nexport default function Main() {\n  const darkMode = useSelector(state => state.darkMode.theme)\n  const containerStyle = darkMode ? styles.darkModeContainer : null\n\n  return (\n    <View style={[styles.container, containerStyle]}>\n            <Header />\n            <Logo />\n            <SearchContainer />\n            {Platform.OS === \"web\" && <Footer />}\n            <StatusBar backgroundColor=\"#F2F2F2\" />\n          </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  darkModeContainer : {\n    backgroundColor: 'black'\n  }\n});\n","import React from \"react\";\nimport { Platform, SafeAreaView, StyleSheet, Text, View } from \"react-native\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport { Provider, useSelector } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nimport rootReducer from \"./reducers/rootReducer\";\nimport Main from \"./components/Main\";\n\n\n\nexport default function App() {\n  const store = createStore(rootReducer);\n\n  const httpLink = new HttpLink({\n    uri: 'https://api.github.com/graphql',\n  });\n\n  const githubToken = 'kek'\n\n  const authLink = setContext((_, { headers }) => {\n    // get the authentication token from local storage if it exists\n    const token = 'Bearer ' + githubToken\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? token : null,\n      }\n    }\n  });\n\n  const client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n  });\n\n  return (\n    <Provider store={store}>\n      <PaperProvider>\n        <SafeAreaView style={{ flex: 1, backgroundColor: \"#F2F2F2\" }}>\n          <ApolloProvider client={client}>\n            <Main />\n          </ApolloProvider>\n        </SafeAreaView>\n      </PaperProvider>\n    </Provider>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.f1c5195b.png\";"],"sourceRoot":""}